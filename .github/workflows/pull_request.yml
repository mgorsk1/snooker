# This is a basic workflow to help you get started with Actions

name: Pull Request

on:
  pull_request:
    branches: [main]

jobs:
  test-unit:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: ['3.6.x', '3.7.x', '3.8.x']
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run python unit tests
        run: make setup_dev test
      - name: Codecov
        uses: codecov/codecov-action@v1
  publish-docs:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Publish docs
        id: docs
        run: |
          pip install -r requirements-doc.txt

          export PYTHONPATH=$PYTHONPATH:$PWD

          if [ -n "${CONFIG_FILE}" ]; then
              print_info "Setting custom path for mkdocs config yml"
              export CONFIG_FILE="${GITHUB_WORKSPACE}/${CONFIG_FILE}"
          else
              export CONFIG_FILE="${GITHUB_WORKSPACE}/mkdocs.yml"
          fi

          if [ -n "${GITHUB_TOKEN}" ]; then
              print_info "setup with GITHUB_TOKEN"
              remote_repo="https://x-access-token:${GITHUB_TOKEN}@${GITHUB_DOMAIN:-"github.com"}/${GITHUB_REPOSITORY}.git"
          elif [ -n "${PERSONAL_TOKEN}" ]; then
              print_info "setup with PERSONAL_TOKEN"
              remote_repo="https://x-access-token:${PERSONAL_TOKEN}@${GITHUB_DOMAIN:-"github.com"}/${GITHUB_REPOSITORY}.git"
          fi

          if ! git config --get user.name; then
              git config --global user.name "${GITHUB_ACTOR}"
          fi

          if ! git config --get user.email; then
              git config --global user.email "${GITHUB_ACTOR}@users.noreply.${GITHUB_DOMAIN:-"github.com"}"
          fi

          git remote rm origin
          git remote add origin "${remote_repo}"

          mkdocs gh-deploy --config-file "${CONFIG_FILE}" --force
